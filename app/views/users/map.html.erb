<script src="//maps.google.com/maps/api/js?v=3.13&amp;sensor=false&amp;libraries=geometry" type="text/javascript"></script>
<script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js' type='text/javascript'></script>

<!-- Add pet info! -->

<div class="row">
<div style='width: 100%;'>
      <div id="map" style='width: 100%; height: 400px;'></div>
</div>
</div>



<!--<div class="row">
    <div class="large-4 columns">
        <img src="http://placehold.it/400x300&text=[img]"/>
        <h4>This is a content section.</h4>
        <p>Bacon ipsum dolor sit amet nulla ham qui sint exercitation eiusmod commodo, chuck duis velit. Aute in reprehenderit, dolore aliqua non est magna in labore pig pork biltong. Eiusmod swine spare ribs reprehenderit culpa. Boudin aliqua adipisicing rump corned beef.</p>
    </div>

    </div>-->

<script type="text/javascript" charset="utf-8">
  // Map location
  var latitude, longitude;
  var left, right, floor, ceil;
  var circles = {};
  var things = {};

$(function() {
    handler = Gmaps.build('Google');
    var map = handler.buildMap({ provider: {
        disableDefaultUI: true
    }, internal: {id: 'map'}}, function(){
        centerMap();
    });

    var updateMapView = function() {
        var keys = Object.keys(circles);
        var bounds = new google.maps.LatLngBounds();
        var r = .2;  // approx radius of the circle

        left = latitude - .5;
        right = latitude + .5;
        ceil = longitude - .5;
        floor = longitude + .5;

        var circle;
        for (var i = keys.length-1; i >= 0; i--) {

            for (var k = circles[keys[i]].length-1; i >= 0; i--) {
                circle = circles[keys[i]][k];

                left = Math.min(circle.center.k-r, left);
                right = Math.max(circle.center.k+r, right);
                ceil = Math.min(circle.center.A-r, ceil);
                floor = Math.max(circle.center.A+r, floor);
            }
        }

        bounds.extend(new google.maps.LatLng(ceil, left));
        bounds.extend(new google.maps.LatLng(floor, right));
        handler.fitMapToBounds(bounds);
        console.log('setting bounds to ', ceil, ',', left, ' and ', floor, ',', right);
    };

    var addPetLocations = function(uuid) {
        var locations = things[uuid].locations;
        var i;

        // Make sure it has something to plot
        if (!locations.length) {
            return;
        }

        // Remove Previous Pet Locations
        if (!circles[uuid]) {
            circles[uuid] = [];
        }

        for (i = circles[uuid].length-1; i >= 0; i--) {
            circles[uuid][i].setMap(null);
        }

        console.log('adding pet');
        // Plot each location
        circles[uuid] = [];
        var circleOptions;
        var lat;
        var lon;
        for (i = locations.length-1; i >= 0; i--) {
            lat = locations[i].latitude;
            lon = locations[i].longitude;
            circleOptions = {
                strokeColor: '#FF0000',
                strokeOpacity: 0.5,
                strokeWeight: 2,
                fillColor: '#FF0000',
                fillOpacity: 0.5,
                map: handler.getMap(),
                center: new google.maps.LatLng(lat, lon),
                radius: locations[i].precision * 100
            };

            circles[uuid].push(new google.maps.Circle(circleOptions));
        }

        // Check if we should adjust map range
        updateMapView();

        //var marker = new google.maps.Marker({
            //position: new google.maps.LatLng(lat, lon),
            //map: map,
            //title: name});
    };

    var requestPetLocations = function() {
        $.ajax({
            url: '<%= api_v1_get_things_path(current_user.id)%>.json', 
                cache: false})
            .success( function (json) {
                var pets = json.things;
                var locs;

                for (var i = pets.length-1; i >= 0; i--) {
                    things[pets[i].uuid] = pets[i];

                    addPetLocations(pets[i].uuid);
                }

                setTimeout(requestPetLocations, 1500);
            })
    };

    // Center the map
    var centerMap = function() {
        $.ajax({
            url: 'http://ipinfo.io/json', 
                dataType: "json",
                cache: false})
            .success( function (json) {
                console.log('location is ' + json.loc);
                latitude = parseFloat(json.loc.split(',')[0]);
                longitude = parseFloat(json.loc.split(',')[1]);
                handler.map.centerOn(new google.maps.LatLng(latitude, longitude));

                // Set zoom
                updateMapView();

                requestPetLocations();
            })
    };


    // Test the adding of pet locations

    // Test the adding of pet locations
    
});

</script>
